// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Profile {
  id        Int      @id @default(autoincrement())
  firstName String
  lastName  String?
  email     String   @unique
  updatedAt DateTime @default(now())
  // relation dari user id references ke id model user
  user   User @relation(fields: [userId], references: [id])
  userId Int @unique

  @@map("profiles")
}

model User {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  // one to one
  profiles  Profile?
  // artinya one to many, user bisa punya banyak post
  Posts     Post[]

  @@map("users")
}

model Post {
  id        Int      @id @default(autoincrement())
  title     String
  content   String?
  published Boolean  @default(false)
  author    User  @relation(fields: [authorId], references: [id])
  authorId  Int
  postCategories PostCategories[] // <-- Add this line for the opposite relation

  @@map("posts")
}

model Category {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  postCategories PostCategories[] // <-- Add this line for the opposite relation

  updatedAt DateTime @default(now())

  @@map("categories")
}

// Many-to-many relationship between Post and Category
model PostCategories {
  post  Post @relation(fields: [postId], references: [id])
  postId Int
  category Category @relation(fields: [categoryId], references: [id])
  categoryId Int
  assignedAt DateTime @default(now())
  assignedBy String

  @@id([postId, categoryId])
  @@map("post_categories")

}